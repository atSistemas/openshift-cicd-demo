apiVersion: v1
kind: Template
labels:
  template: openshift-deployment-strategies-pipeline
message: This Template creates a showcase demo example of openshift deployment strategies using a Jenkins pipeline
metadata:
  annotations:
    description: Showcase demo example of openshift deployment strategies using a Jenkins pipeline
    iconClass: icon-jboss
    tags: jenkins, pipeline, deployment-strategies, recreate, rolling, blue-green
  name: openshift-deployment-strategies-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: blue-green-pipeline
      name: blue-green-pipeline
    name: blue-green-pipeline
  spec:
    runPolicy: Parallel
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
               timeout(time: 20, unit: 'MINUTES') {
                  def appName="dpro"
                  def project="pro"
                  def tag="blue"
                  def altTag="green"
                  def verbose="false"
                  def app="polaris"
                  def version

                  node {

                    stage('Build App') {

                      git branch: 'master', url: 'http://gogs:3000/gogs/polaris.git'

                      script {
                          def pom = readMavenPom file: 'pom.xml'
                          version = pom.version
                      }

                      withMaven(maven: 'M3') {
                        sh "mvn install -DskipTests=true"
                      }
                    }

                    stage('Test') {
                        withMaven(maven: 'M3') {
                            sh "mvn test"
                        }
                        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                    }

                    stage('Code Analysis') {

                        withMaven(maven: 'M3') {
                            sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                        }

                    }

                    stage('Archive App') {
                        withMaven(maven: 'M3') {
                          /*sh "mvn deploy -DskipTests=true -P nexus3"*/
                        }

                    }

                    stage("Build Image") {
                        echo "building image ${app}"
                        openshiftBuild buildConfig: app, showBuildLogs: "true", verbose: verbose, namespace: "dev"
                    }

                    stage("Deploy DEV") {
                        openshiftTag srcStream: app, srcTag: 'latest', destinationStream: app, destinationTag: tag, verbose: verbose, namespace: "dev"
                        openshiftVerifyDeployment deploymentConfig: "${app}-dc", verbose: verbose, namespace: "dev"
                    }

                    stage("Deploy STAGE") {
                        openshiftDeploy deploymentConfig: "${app}-dc", verbose:verbose, namespace: "stage"
                    }

                    stage("Upload version artifact in PRO") {
                        input message: "Test deployment in PRO. Approve?", id: "approval"
                    }

                    stage("Initialize PRO") {
                        sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
                        activeService = readFile('activeservice').trim()
                        if (activeService == "${project}-blue") {
                        tag = "green"
                        altTag = "blue"
                        }
                        sh "oc get route ${tag}-d${project} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                        routeHost = readFile('routehost').trim()
                    }

                    stage("Deploy Test PRO") {
                        openshiftTag srcStream: app, srcTag: 'latest', destinationStream: app, destinationTag: tag, verbose: verbose, namespace: "dev"
                        openshiftVerifyDeployment deploymentConfig: "${project}-${tag}", verbose: verbose, namespace: project
                    }

                    stage("Active deploy to ${tag}") {
                        input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                    }

                    stage("Go Live") {
                        sh "oc set -n ${project} route-backends ${appName} ${project}-${tag}=100 ${project}-${altTag}=0 --loglevel=4"
                    }
                  }
               }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>