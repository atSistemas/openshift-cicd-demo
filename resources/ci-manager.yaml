apiVersion: v1
kind: Template
labels:
  template: ci-manager-template
  app: ci-manager
metadata:
  name: ci-manager
  annotations:
    description: atSistemas ci-manager template
    tags: ci,ci-manager
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: "${APPLICATION_IMAGE_NAMESPACE}/${APPLICATION_NAME}:${APPLICATION_VERSION}"
      name: ${APPLICATION_VERSION}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 0
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          failurePolicy: Abort
          execNewPod:
            containerName: ${APPLICATION_NAME}
            command:
              - "/bin/bash"
              - "-c"
              - "echo execNewPod"
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: GOGS_USER
            value: ${GOGS_USER}
          - name: GOGS_PASSWD
            value: ${GOGS_PASSWD}
          image: "${APPLICATION_IMAGE_NAMESPACE}/${APPLICATION_NAME}:${APPLICATION_VERSION}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MAX_MEMORY}
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log

        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APPLICATION_NAME}-data
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:${APPLICATION_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8088-tcp
      port: 8088
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8088-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- displayName: ci-manager Service Name
  name: APPLICATION_NAME
  required: true
  value: ci-manager
- displayName: ci-manager Service Version
  name: APPLICATION_VERSION
  required: true
  value: 0.0.1-SNAPSHOT
- displayName: ci-manager Image Namespace
  name: APPLICATION_IMAGE_NAMESPACE
  required: true
  value: atsistemas
- displayName: Gogs user
  name: GOGS_USER
  required: true
  value: gogs
- displayName: Gogs password
  name: GOGS_PASSWD
  required: true
  value: gogs
- description: Max memory allocated to the Gogs pod
  displayName: Max Memory
  name: MAX_MEMORY
  required: true
  value: 1Gi