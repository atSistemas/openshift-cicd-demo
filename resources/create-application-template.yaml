apiVersion: v1
kind: Template
labels:
  template: create-application-template
message: This Template create all resources to deploy automatically a springboot application in dev environment
metadata:
  annotations:
    description: Create springboot application in in dev environment
    iconClass: icon-jboss
    tags: dev
  name: create-application-template
parameters:
- name: APP_NAME
  displayName: Application name
  value: polaris
  required: true
- name: APP_REPO_URL
  displayName: Application Git repository URL
  value: https://github.com/atsistemas/polaris.git
  required: true
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
objects:
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: create-application-job
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc set resources dc/jenkins --limits=memory=1Gi --requests=memory=512Mi
            oc label dc jenkins app=jenkins --overwrite

            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"


            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            oc rollout status dc gogs

            _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)

            sleep 5

            if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
              echo "ERROR: Failed to create Gogs admin"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 10

            cat <<EOF > /tmp/data.json
            {
              "clone_addr": "${APP_REPO_URL}",
              "uid": 1,
              "repo_name": "${APP_NAME}"
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to imported ${APP_REPO_URL} GitHub repo"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/${APP_NAME}-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/${APP_NAME}/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              cat /tmp/curl.log
              exit 255
            fi
          image: openshift/origin:v3.7.0
          name: create-application-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: ${APP_NAME}-pipeline
  spec:
    # triggers:
    #   - type: GitHub
    #     github:
    #       secret: ${WEBHOOK_SECRET}
    #   - type: Generic
    #     generic:
    #       secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
          try {
               timeout(time: 10, unit: 'MINUTES') {
                  def appName="dpro"
                  def project="pro"
                  def tag="blue"
                  def altTag="green"
                  def verbose="true"
                  def app="${APP_NAME}"
                  def version

                  node {

                    stage('Build App') {

                      git branch: 'master', url: 'http://gogs:3000/gogs/polaris.git'

                      script {
                          def pom = readMavenPom file: 'pom.xml'
                          version = pom.version
                      }

                      withMaven(maven: 'M3') {
                        sh "mvn install -DskipTests=true"
                      }
                    }

                    stage('Test') {
                        withMaven(maven: 'M3') {
                            sh "mvn test"
                        }
                        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                    }

                    stage('Code Analysis') {

                        withMaven(maven: 'M3') {
                            sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                        }

                    }

                    stage('Archive App') {
                        withMaven(maven: 'M3') {
                          /*sh "mvn deploy -DskipTests=true -P nexus3"*/
                        }

                    }

                    stage("Build Image") {
                        echo "building image ${app}"
                        openshiftBuild buildConfig: app, showBuildLogs: "true", verbose: verbose, namespace: "dev"
                    }

                    stage("Deploy DEV") {
                        openshiftTag srcStream: app, srcTag: 'latest', destinationStream: app, destinationTag: tag, verbose: verbose, namespace: "dev"
                        openshiftVerifyDeployment deploymentConfig: "${app}-dc", verbose: verbose, namespace: "dev"
                    }

                    stage("Deploy STAGE") {
                        openshiftDeploy deploymentConfig: "${app}-dc", verbose:verbose, namespace: "stage"
                    }

                    stage("Upload version artifact in PRO") {
                        input message: "Test deployment in PRO. Approve?", id: "approval"
                    }

                    stage("Initialize PRO") {
                        sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
                        activeService = readFile('activeservice').trim()
                        if (activeService == "${project}-blue") {
                        tag = "green"
                        altTag = "blue"
                        }
                        sh "oc get route ${tag}-d${project} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                        routeHost = readFile('routehost').trim()
                    }

                    stage("Deploy Test PRO") {
                        openshiftTag srcStream: app, srcTag: 'latest', destinationStream: app, destinationTag: tag, verbose: verbose, namespace: "dev"
                        openshiftVerifyDeployment deploymentConfig: "${project}-${tag}", verbose: verbose, namespace: project
                    }

                    stage("Active deploy to ${tag}") {
                        input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                    }

                    stage("Go Live") {
                        sh "oc set -n ${project} route-backends ${appName} ${project}-${tag}=100 ${project}-${altTag}=0 --loglevel=4"
                    }
                }

                }
            } catch (err) {
               echo "in catch block"
               echo "Caught: ${err}"
               currentBuild.result = 'FAILURE'
               throw err
            }
      type: JenkinsPipeline
